{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kashi\\\\lostkk\\\\client\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      // Connect to Socket.IO server\n      const newSocket = io('http://localhost:5000');\n      setSocket(newSocket);\n\n      // Join the user's room\n      newSocket.emit('join', user._id);\n\n      // Listen for notifications\n      newSocket.on('notification', notification => {\n        console.log('Received notification:', notification);\n        setNotifications(prev => [notification, ...prev]);\n\n        // Show browser notification\n        if (Notification.permission === 'granted') {\n          const browserNotification = new Notification(notification.title, {\n            body: notification.message,\n            icon: '/favicon.ico',\n            requireInteraction: notification.type === 'match' // Keep match notifications open longer\n          });\n\n          // Add click handler for match notifications\n          if (notification.type === 'match' && notification.matchedUserInfo) {\n            browserNotification.onclick = () => {\n              // You could open a modal or navigate to a specific page\n              console.log('Match notification clicked - user info:', notification.matchedUserInfo);\n            };\n          }\n        }\n      });\n      return () => {\n        newSocket.close();\n      };\n    }\n  }, [isAuthenticated, user]);\n  const markNotificationAsRead = async notificationId => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/reports/notifications/${notificationId}/read`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        setNotifications(prev => prev.map(notif => notif.notificationId === notificationId ? {\n          ...notif,\n          read: true\n        } : notif));\n      }\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n  const clearNotifications = () => {\n    setNotifications([]);\n  };\n  const value = {\n    socket,\n    notifications,\n    markNotificationAsRead,\n    clearNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"YL2FS0PfwTijuGQ5asBE44P/ApQ=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useAuth","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","notifications","setNotifications","user","isAuthenticated","newSocket","emit","_id","on","notification","console","log","prev","Notification","permission","browserNotification","title","body","message","icon","requireInteraction","type","matchedUserInfo","onclick","close","markNotificationAsRead","notificationId","response","fetch","method","headers","localStorage","getItem","ok","map","notif","read","error","clearNotifications","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kashi/lostkk/client/src/context/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const { user, isAuthenticated } = useAuth();\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated && user) {\r\n      // Connect to Socket.IO server\r\n      const newSocket = io('http://localhost:5000');\r\n      setSocket(newSocket);\r\n\r\n      // Join the user's room\r\n      newSocket.emit('join', user._id);\r\n\r\n      // Listen for notifications\r\n      newSocket.on('notification', (notification) => {\r\n        console.log('Received notification:', notification);\r\n        setNotifications(prev => [notification, ...prev]);\r\n        \r\n        // Show browser notification\r\n        if (Notification.permission === 'granted') {\r\n          const browserNotification = new Notification(notification.title, {\r\n            body: notification.message,\r\n            icon: '/favicon.ico',\r\n            requireInteraction: notification.type === 'match' // Keep match notifications open longer\r\n          });\r\n          \r\n          // Add click handler for match notifications\r\n          if (notification.type === 'match' && notification.matchedUserInfo) {\r\n            browserNotification.onclick = () => {\r\n              // You could open a modal or navigate to a specific page\r\n              console.log('Match notification clicked - user info:', notification.matchedUserInfo);\r\n            };\r\n          }\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        newSocket.close();\r\n      };\r\n    }\r\n  }, [isAuthenticated, user]);\r\n\r\n  const markNotificationAsRead = async (notificationId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/reports/notifications/${notificationId}/read`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        setNotifications(prev => \r\n          prev.map(notif => \r\n            notif.notificationId === notificationId \r\n              ? { ...notif, read: true }\r\n              : notif\r\n          )\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n    }\r\n  };\r\n\r\n  const clearNotifications = () => {\r\n    setNotifications([]);\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    notifications,\r\n    markNotificationAsRead,\r\n    clearNotifications\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}